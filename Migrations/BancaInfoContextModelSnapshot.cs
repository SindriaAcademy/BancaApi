// <auto-generated />
using System;
using BancaApi.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BancaApi.Migrations
{
    [DbContext(typeof(BancaInfoContext))]
    partial class BancaInfoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BancaApi.Entities.BancaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Banche");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Banca Uno"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Banca Due"
                        });
                });

            modelBuilder.Entity("BancaApi.Entities.BancheFunzionalitaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdBanca")
                        .HasColumnType("int");

                    b.Property<int>("IdFunzionalita")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdBanca");

                    b.HasIndex("IdFunzionalita");

                    b.ToTable("BancheFunzionalita");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdBanca = 1,
                            IdFunzionalita = 1
                        },
                        new
                        {
                            Id = 2,
                            IdBanca = 1,
                            IdFunzionalita = 2
                        });
                });

            modelBuilder.Entity("BancaApi.Entities.ContoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataUltimaOperazione")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdUtente")
                        .HasColumnType("int");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("Conti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataUltimaOperazione = new DateTime(2023, 11, 7, 11, 14, 56, 279, DateTimeKind.Local).AddTicks(9726),
                            IdUtente = 1,
                            Saldo = 1000m
                        },
                        new
                        {
                            Id = 2,
                            DataUltimaOperazione = new DateTime(2023, 11, 7, 11, 14, 56, 279, DateTimeKind.Local).AddTicks(9787),
                            IdUtente = 2,
                            Saldo = 2000m
                        });
                });

            modelBuilder.Entity("BancaApi.Entities.FunzionalitaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Funzionalita");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Versamento"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Prelievo"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Saldo"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Registro Operazioni"
                        });
                });

            modelBuilder.Entity("BancaApi.Entities.OperazioneEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataOperazione")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Funzionalita")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdBanca")
                        .HasColumnType("int");

                    b.Property<int>("IdUtente")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantita")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("IdBanca");

                    b.HasIndex("IdUtente");

                    b.ToTable("Operazioni");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataOperazione = new DateTime(2023, 11, 7, 11, 14, 56, 279, DateTimeKind.Local).AddTicks(9814),
                            Funzionalita = "Deposito",
                            IdBanca = 1,
                            IdUtente = 1,
                            Quantita = 500m
                        },
                        new
                        {
                            Id = 2,
                            DataOperazione = new DateTime(2023, 11, 7, 11, 14, 56, 279, DateTimeKind.Local).AddTicks(9818),
                            Funzionalita = "Prelievo",
                            IdBanca = 2,
                            IdUtente = 2,
                            Quantita = 300m
                        });
                });

            modelBuilder.Entity("BancaApi.Entities.UtenteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdBanca")
                        .HasColumnType("int");

                    b.Property<string>("NomeUtente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdBanca");

                    b.ToTable("Utenti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdBanca = 1,
                            NomeUtente = "dario",
                            Password = "dario"
                        },
                        new
                        {
                            Id = 2,
                            IdBanca = 2,
                            NomeUtente = "sidy",
                            Password = "sidy"
                        });
                });

            modelBuilder.Entity("BancaApi.Entities.BancheFunzionalitaEntity", b =>
                {
                    b.HasOne("BancaApi.Entities.BancaEntity", "Banca")
                        .WithMany()
                        .HasForeignKey("IdBanca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BancaApi.Entities.FunzionalitaEntity", "Funzionalita")
                        .WithMany()
                        .HasForeignKey("IdFunzionalita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banca");

                    b.Navigation("Funzionalita");
                });

            modelBuilder.Entity("BancaApi.Entities.OperazioneEntity", b =>
                {
                    b.HasOne("BancaApi.Entities.BancaEntity", "Banca")
                        .WithMany()
                        .HasForeignKey("IdBanca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BancaApi.Entities.UtenteEntity", "Utente")
                        .WithMany()
                        .HasForeignKey("IdUtente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banca");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("BancaApi.Entities.UtenteEntity", b =>
                {
                    b.HasOne("BancaApi.Entities.BancaEntity", "Banca")
                        .WithMany()
                        .HasForeignKey("IdBanca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banca");
                });
#pragma warning restore 612, 618
        }
    }
}
